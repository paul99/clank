/* Copyright (c) 2012 The Chromium Authors. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

/*
 * This file defines the <code>PPB_DirectoryReader_Dev</code> interface.
 */

label Chrome {
  M13 = 0.5
};

[assert_size(8)]
struct PP_DirectoryEntry_Dev {
  PP_Resource file_ref;
  PP_FileType file_type;
};

interface PPB_DirectoryReader_Dev {
  // Creates a DirectoryReader for the given directory.  Upon success, the
  // corresponding directory is classified as "in use" by the resulting
  // DirectoryReader object until such time as the DirectoryReader object is
  // destroyed.
  PP_Resource Create([in] PP_Resource directory_ref);

  // Returns PP_TRUE if the given resource is a DirectoryReader. Returns
  // PP_FALSE if the resource is invalid or some type other than a
  // DirectoryReader.
  PP_Bool IsDirectoryReader([in] PP_Resource resource);

  // Reads the next entry in the directory.  Returns PP_OK and sets
  // entry->file_ref to 0 to indicate reaching the end of the directory.  If
  // entry->file_ref is non-zero when passed to GetNextEntry, it will be
  // released before the next file_ref is stored.
  //
  // EXAMPLE USAGE:
  //
  //   PP_Resource reader = reader_funcs->Create(dir_ref);
  //   PP_DirectoryEntry entry = {0};
  //   while ((reader_funcs->GetNextEntry(reader, &entry,
  //                                      PP_BlockUntilComplete()) == PP_OK) &&
  //          entry->file_ref) {
  //     ProcessDirectoryEntry(entry);
  //   }
  //   core_funcs->ReleaseResource(reader);
  //
  int32_t GetNextEntry([in] PP_Resource directory_reader,
                       [out] PP_DirectoryEntry_Dev entry,
                       [in] PP_CompletionCallback callback);
};
