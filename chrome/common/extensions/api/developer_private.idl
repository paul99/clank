// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// developerPrivate API.
// This is a private API exposing developing and debugging functionalities for
// apps and extensions.

namespace developerPrivate {

  enum ItemType {
    hosted_app,
    packaged_app,
    legacy_packaged_app,
    extension,
    theme
  };

  dictionary ItemInspectView {
    // path to the inspect page.
    DOMString path;

    // For lazy background pages, the value is -1.
    long render_process_id;

    long render_view_id;
    boolean incognito;
  };

  dictionary ItemInfo {
    DOMString id;
    DOMString name;
    DOMString version;
    DOMString description;
    boolean may_disable;
    boolean enabled;
    DOMString? disabled_reason;
    boolean isApp;
    ItemType type;
    boolean allow_activity;
    boolean allow_file_access;
    boolean wants_file_access;
    boolean incognito_enabled;
    boolean is_unpacked;
    boolean allow_reload;
    boolean terminated;
    boolean allow_incognito;
    DOMString icon;

    // Path of an unpacked extension.
    DOMString? path;

    // Options settings page for the item.
    DOMString? options_url;
    DOMString? app_launch_url;
    DOMString? homepage_url;
    DOMString? update_url;
    boolean offline_enabled;

    // All views of the current extension.
    ItemInspectView[] views;
  };

  dictionary InspectOptions {
    DOMString extension_id;
    DOMString render_process_id;
    DOMString render_view_id;
    boolean incognito;
  };

  callback BooleanCallback = void (boolean result);
  callback ItemsInfoCallback = void (ItemInfo[] result);
  callback GetStringsCallback = void (object result);

  interface Functions {
    // Runs auto update for extensions and apps immediately.
    // |callback| : Called with the boolean result, true if autoUpdate is
    // successful.
    static void autoUpdate(BooleanCallback callback);

    // Returns information of all the extensions and apps installed.
    // |include_disabled| : include disabled items.
    // |include_terminated| : include terminated items.
    // |callback| : Called with items info.
    static void getItemsInfo(boolean include_disabled,
                             boolean include_terminated,
                             ItemsInfoCallback callback);

    // Opens an inspect window for given |options|
    static void inspect(InspectOptions options,
                        BooleanCallback callback);

    // Enable / Disable file access for a given |itemId|
    static void allowFileAccess(DOMString itemId,
                                boolean allow,
                                BooleanCallback callback);

    // Reloads a given item with |itemId|.
    static void reload(DOMString itemId, BooleanCallback callback);

    // Enable / Disable a given item with id |itemId|.
    static void enable(DOMString itemId,
                       boolean enable,
                       BooleanCallback callback);

    // Load a user selected unpacked item.
    static void loadUnpacked(BooleanCallback callback);

    // Gets localized translated strings for apps_debugger. It returns the
    // strings as a dictionary mapping from string identifier to the
    // translated string to use in the apps_debugger app UI.
    static void getStrings(GetStringsCallback callback);
  };

};
