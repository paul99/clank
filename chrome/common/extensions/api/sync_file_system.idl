// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace syncFileSystem {
  enum SyncAction {
    added, updated, deleted
  };

  enum ServiceStatus {
    // The sync service is being initialized (e.g. restoring data from the
    // database, checking connectivity and authenticating to the service etc).
    initializing,

    // The sync service is up and running.
    running,

    // The sync service is not synchronizing files because the remote service
    // needs to be authenticated by the user to proceed.
    authentication_required,

    // The sync service is not synchronizing files because the remote service
    // is (temporarily) unavailable due to some recoverable errors, e.g.
    // network is offline, the remote service is down or not
    // reachable etc. More details should be given by |description| parameter
    // in OnServiceInfoUpdated (which could contain service-specific details).
    temporary_unavailable,

    // The sync service is disabled and the content will never sync.
    // (E.g. this could happen when the user has no account on
    // the remote service or the sync service has had an unrecoverable
    // error.)
    disabled
  };

  enum FileStatus {
    // Not conflicting and has no pending local changes.
    synced,

    // Has one or more pending local changes that haven't been synchronized.
    pending,

    // File conflicts with remote version and must be resolved manually.
    conflicting
  };

  enum SyncDirection {
    local_to_remote, remote_to_local
  };

  dictionary FileInfo {
    // |fileEntry| will contain name and path information of synchronized file.
    // On file deletion, fileEntry information will still be available but file
    // will no longer exist.
    [instanceOf=FileEntry] object fileEntry;
    
    FileStatus status;
    
    // Only applies if status is synced.
    SyncAction? action;
    
    // Only applies if status is synced.
    SyncDirection? direction;
  };

  dictionary StorageInfo {
    long usageBytes;
    long quotaBytes;
  };

  dictionary ServiceInfo {
    ServiceStatus state;
    DOMString description;
  };

  // [nodoc] A callback type for requestFileSystem.
  callback GetFileSystemCallback =
      void ([instanceOf=DOMFileSystem] object fileSystem);

  // [nodoc] A callback type for getUsageAndQuota.
  callback QuotaAndUsageCallback = void (StorageInfo info);

  // Returns true if operation was successful.
  callback DeleteFileSystemCallback = void (boolean result);

  // [nodoc] A callback type for getFileStatus.
  callback GetFileStatusCallback = void (FileStatus status);

  interface Functions {
    // Returns a syncable filesystem backed by Google Drive. 
    // The returned DOMFileSystem instance can be operated on in the same way as
    // the Temporary and Persistant file systems.
    // (http://www.w3.org/TR/file-system-api/). Calling this multiple times from
    // the same app will return the same handle to the same file system. 
    static void requestFileSystem(GetFileSystemCallback callback);

    // Get usage and quota in bytes for sync file system with |serviceName|.
    static void getUsageAndQuota([instanceOf=DOMFileSystem] object fileSystem,
                                 QuotaAndUsageCallback callback);

    // Deletes everything in the syncable filesystem.
    static void deleteFileSystem([instanceOf=DOMFileSystem] object fileSystem,
                                 DeleteFileSystemCallback callback);

    // Get the FileStatus for the given |fileEntry|.
    static void getFileStatus([instanceOf=FileEntry] object fileEntry,
                              GetFileStatusCallback callback);
  };

  interface Events {
    // Fired when an error or other status change has happened in the
    // sync backend. (e.g. the sync is temporarily disabled due to
    // network or authentication error etc).
    static void onServiceStatusChanged(ServiceInfo detail);

    // Fired when a file has been updated by the background sync service.
    static void onFileStatusChanged(FileInfo detail);
  };

};
